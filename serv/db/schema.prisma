//-----------------------------------Config------------------------------------
//-----------------------------------Config------------------------------------

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

//------------------------------------Users-----------------------------------

model User {
  id                 Int                @id @default(autoincrement())
  createdAt          DateTime           @default(now())
  updatedAt          DateTime           @updatedAt
  name               String
  email              String             @unique
  hashedPassword     String?
  role               String             @default("User")
  deleted            Boolean            @default(false)

  tokens             Token[]
  sessions           Session[]
  appSessions        AppSession[]

  restaurant         Restaurant?        @relation(fields: [restaurantId], references: [id], onDelete: Cascade)
  restaurantId       Int?
  tables             Table[]
  orders             Order[]
}

model Session {
  id                 Int                @id @default(autoincrement())
  createdAt          DateTime           @default(now())
  updatedAt          DateTime           @updatedAt
  expiresAt          DateTime?
  handle             String             @unique
  hashedSessionToken String?
  antiCSRFToken      String?
  publicData         String?
  privateData        String?

  user               User?              @relation(fields: [userId], references: [id])
  userId             Int?
}

model Token {
  id                 Int                @id @default(autoincrement())
  createdAt          DateTime           @default(now())
  updatedAt          DateTime           @updatedAt
  hashedToken        String
  type               String
  expiresAt          DateTime
  sentTo             String

  user               User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId             Int

  @@unique([hashedToken, type])
}

model AppSession {
  id                 Int                @id @default(autoincrement())
  createdAt          DateTime           @default(now())
  key                String

  user               User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId             Int
}

//---------------------------------Restaurants----------------------------------

model Restaurant {
  id                 Int                @id @default(autoincrement())
  name               String             @default("New restaurant")
  description        String             @default("We have tasty food")
  currency           String             @default("eur")
  openTimes          Json               @default("[10, 10, 10, 10, 10, 12, 12]")
  closeTimes         Json               @default("[22, 22, 22, 22, 22, 20, 20]")
  logoKey            String?
  bannerKey          String?

  users              User[]
  categories         Category[]
  dishes             Dish[]
  tables             Table[]
  orders             Order[]
  promos             Promo[]
}

model Category {
  id                 Int                @id @default(autoincrement())
  name               String             @default("New dish")
  order              Int

  deleted            Boolean            @default(false)

  restaurant         Restaurant         @relation(fields: [restaurantId], references: [id], onDelete: Cascade)
  restaurantId       Int

  dishes             Dish[]

  @@unique([restaurantId, order])
}

model Dish {
  id                 Int                @id @default(autoincrement())
  order              Int

  name               String             @default("New dish")
  description        String             @default("This is a tasty dish")
  ingredients        String             @default("")
  measurementUnit    String             @default("gr")
  measurementValue   Float              @default(1)
  price              Float              @default(1)
  discount           Int?
  calories           Int?
  fat                Float?
  protein            Float?
  carbs              Float?
  spicyLevel         Int                @default(0)
  labels             Json               @default("[]")
  featured           Boolean            @default(false)
  topOfTheWeek       Boolean            @default(false)
  colorBorder        Boolean            @default(false)
  color              String?
  sticker            String?

  imageKeys          Json               @default("[]")
  modelKey           String?

  deleted            Boolean            @default(false)

  category           Category           @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  categoryId         Int

  restaurant         Restaurant         @relation(fields: [restaurantId], references: [id], onDelete: Cascade)
  restaurantId       Int
  ordered            OrderedDish[]
  promos             Promo[]

  @@unique([categoryId, order])
  @@unique([restaurantId, name])
}

model Table {
  id                 Int                @id @default(autoincrement())
  name               String             @default("New table")
  occupancy          String             @default("3-6")

  restaurant         Restaurant         @relation(fields: [restaurantId], references: [id], onDelete: Cascade)
  restaurantId       Int

  idle               Boolean            @default(true)
  deleted            Boolean            @default(false)

  waiters            User[]
  orders             Order[]

  @@unique([restaurantId, name])
}

model OrderedDish {
  id                 Int                @id @default(autoincrement())

  order              Order              @relation(fields: [orderId], references: [id], onDelete: Cascade)
  orderId            Int

  dish               Dish               @relation(fields: [dishId], references: [id], onDelete: Cascade)
  dishId             Int

  count              Int                @default(1)
}

model Order {
  id                 Int                @id @default(autoincrement())
  createdAt          DateTime           @default(now())

  notes              String             @default("")
  promo              String?

  state              String             @default("Pending")
  payed              Boolean            @default(false)
  delivered          Boolean            @default(false)

  restaurant         Restaurant         @relation(fields: [restaurantId], references: [id], onDelete: Cascade)
  restaurantId       Int
  user               User?              @relation(fields: [userId], references: [id])
  userId             Int?
  dishes             OrderedDish[]
  table              Table?             @relation(fields: [tableId], references: [id])
  tableId            Int?
}

model Promo {
  id                 Int                @id @default(autoincrement())

  name               String
  percentageDiscount Int?
  fixedDiscount      Float?
  minSumm            Float?
  dueDate            DateTime?
  maxUse             Int?
  useCount           Int                @default(0)

  restaurant         Restaurant         @relation(fields: [restaurantId], references: [id], onDelete: Cascade)
  restaurantId       Int

  allDishes          Boolean            @default(false)
  dishes             Dish[]

  @@unique([restaurantId, name])
}
